#!/usr/bin/env ruby

print <<-__CODE__
//
// THIS FILE IS AUTOMATICALLY GENERATED:
//   $ ruby #{$0} #{ARGV.join(' ')}
//
__CODE__

ip_protocols = Hash.new
File.new(ARGV.shift).each_line do |line|
  proto, desc = line.chomp.split(/,/)
  proto = Integer(proto)
  ip_protocols[proto] = desc
end

icmp_desc = Hash.new
File.new(ARGV.shift).each_line do |line|
  type, desc = line.chomp.split(/,/)
  type = Integer(type)
  icmp_desc[type] = desc
end

port_desc = Hash.new
File.new(ARGV.shift).each_line do |line|
  port, proto, desc = line.chomp.split(/,/)
  port  = Integer(port)
  if proto == '*'
    port_desc[port] = desc
  else
    port_desc[port] ||= {}
    port_desc[port][Integer(proto)] = desc
  end
end

print <<-__CODE__
#line #{__LINE__} "#{__FILE__}"

#include "common.h"
#include "flow_desc.h"

char *proto_name(u_int8_t proto) {
  switch (proto) {
__CODE__

ip_protocols.keys.sort.each do |proto|
  print <<-__CODE__
    case #{'%3u' % proto}: return "#{ip_protocols[proto]}";
  __CODE__
end

print <<-__CODE__
#line #{__LINE__} "#{__FILE__}"
  }
  return NULL;
}

char *icmp_desc(u_int8_t type, u_int8_t code) {
  switch (type) {
__CODE__

icmp_desc.keys.sort.each do |type|
  print <<-__CODE__
    case #{'%2u' % type}: return "#{icmp_desc[type]}";
  __CODE__
end

print <<-__CODE__
#line #{__LINE__} "#{__FILE__}"
  }
  return NULL;
}

char *port_desc(u_int8_t proto, u_int16_t port) {
  switch (port) {
__CODE__

port_desc.keys.sort.each do |port|
  if port_desc[port].is_a?(String)
    print <<-__CODE__
    case #{'%5u' % port}: return "#{port_desc[port]}";
    __CODE__
  else
    print <<-__CODE__
    case #{'%5u' % port}:
      switch (proto) {
    __CODE__
    port_desc[port].keys.sort.each do |proto|
      print <<-__CODE__
        case #{'%2u' % proto}: return "#{port_desc[port][proto]}";
      __CODE__
    end
    print <<-__CODE__
      }
      break;
    __CODE__
  end
end

print <<-__CODE__
#line #{__LINE__} "#{__FILE__}"
  }
  return NULL;
}

char *pair_desc(u_int8_t proto, u_int16_t src_port, u_int16_t dst_port) {
  u_int16_t min_port, max_port;
  if (src_port <= dst_port) {
    min_port = src_port;
    max_port = dst_port;
  } else {
    min_port = dst_port;
    max_port = src_port;
  }
  char *desc;
  desc = port_desc(proto,min_port);
  if (desc) return desc;
  desc = port_desc(proto,max_port);
  if (desc) return desc;
  return NULL;
}

__CODE__
